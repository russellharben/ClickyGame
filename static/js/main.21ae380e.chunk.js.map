{"version":3,"sources":["Components/BoardItems/index.js","App.js","serviceWorker.js","index.js"],"names":["BoardItems","props","react_default","a","createElement","className","Card","displayScore","stateScore","onClick","score","style","width","cursor","Img","st","state","variant","src","image","Body","Title","name","App","items","clicked","shuffle","i","length","j","Math","floor","random","_ref","handleScore","id","console","log","_this","includes","alert","concat","setState","document","getElementById","addEventListener","reload","Object","toConsumableArray","window","location","_this2","this","Navbar","bg","Brand","href","Nav","Link","map","item","Components_BoardItems","key","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+zDAmBeA,MAbf,SAAoBC,GAEhB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,aAAcN,EAAMO,WAAYC,QAASR,EAAMS,MAAOC,MAAO,CAAEC,MAAO,QAASC,OAAO,YACxFX,EAAAC,EAAAC,cAACE,EAAA,EAAKQ,IAAN,CAAUC,GAAId,EAAMe,MAAOC,QAAQ,MAAMC,IAAKjB,EAAMkB,QAChDjB,EAAAC,EAAAC,cAACE,EAAA,EAAKc,KAAN,KACIlB,EAAAC,EAAAC,cAACE,EAAA,EAAKe,MAAN,KAAapB,EAAMqB,kBC+D5BC,6MAnEbP,MAAQ,CACNQ,QACAd,MAAO,EACPe,QAAS,MAGXC,QAAU,WACR,IAAK,IAAIC,EAAIH,EAAMI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAElB,CAACT,EAAMK,GAAIL,EAAMG,IAAvCH,EAAMG,GAFkCM,EAAA,GAE9BT,EAAMK,GAFwBI,EAAA,OAU7CC,YAAc,SAAAC,GACZC,QAAQC,IAAI,4BAEZC,EAAKtB,MAAMN,QAEP4B,EAAKtB,MAAMS,QAAQc,SAASJ,IAC9BK,MAAK,0CAAAC,OAA2CH,EAAKtB,MAAMN,MAAQ,IACnE4B,EAAKI,SAAS,CAAEhC,MAAO,IACvBiC,SAASC,eAAe,QAAQC,iBAAiB,QAASP,EAAKQ,YAG/DR,EAAKZ,UACLY,EAAKI,SAAS,CACZjB,QAAO,CAAGU,GAAHM,OAAAM,OAAAC,EAAA,EAAAD,CAAUT,EAAKtB,MAAMS,YAE9BW,QAAQC,IAAIC,EAAKtB,MAAMN,iFAlBzBuC,OAAOC,SAASJ,0CAsBT,IAAAK,EAAAC,KACP,OACElD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAQC,GAAG,OAAOrC,QAAQ,QACxBf,EAAAC,EAAAC,cAACiD,EAAA,EAAOE,MAAR,CAAcC,KAAK,SAAnB,eACAtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAKpD,UAAU,WACbH,EAAAC,EAAAC,cAACqD,EAAA,EAAIC,KAAL,CAAUF,KAAK,SAAf,QACAtD,EAAAC,EAAAC,cAACqD,EAAA,EAAIC,KAAL,CAAUF,KAAK,aAAf,YACAtD,EAAAC,EAAAC,cAACqD,EAAA,EAAIC,KAAL,KACExD,EAAAC,EAAAC,cAAA,sBAAcgD,KAAKpC,MAAMN,UAI/BR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZmB,EAAMmC,IAAI,SAAAC,GAAI,OACb1D,EAAAC,EAAAC,cAACyD,EAAD,CACEC,IAAKF,EAAKzB,GACVb,KAAMsC,EAAKtC,KACXH,MAAOyC,EAAKzC,MACZT,MAAO,kBAAMyC,EAAKjB,YAAY0B,EAAKzB,KACnC3B,WAAY2C,EAAKnC,MAAMN,oBA3DrBqD,aCMEC,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAASC,MACvB,2DCXNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAAS1B,SAASC,eAAe,SD0H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.21ae380e.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\nimport { Card } from \"react-bootstrap\";\n\n\n\nfunction BoardItems(props) {\n\n    return <div className=\"itemCard\">\n            <Card displayScore={props.stateScore} onClick={props.score} style={{ width: '16rem', cursor:'pointer' }}>\n                <Card.Img st={props.state} variant=\"top\" src={props.image} />\n                    <Card.Body>\n                        <Card.Title>{props.name}</Card.Title>\n                    </Card.Body>\n                </Card>\n            </div>\n\n}\n\nexport default BoardItems;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport BoardItems from \"./Components/BoardItems/index\";\nimport items from \"./items.json\";\n\nclass App extends Component {\n\n  state = {\n    items,\n    score: 0,\n    clicked: []\n  }\n\n  shuffle = () => {\n    for (let i = items.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [items[i], items[j]] = [items[j], items[i]];\n    }\n  }\n\n  reload() {\n    window.location.reload();\n  }\n\n  handleScore = id => {\n    console.log(\"handleScore() running...\")\n    //   console.log(id)\n    this.state.score++;\n\n    if (this.state.clicked.includes(id)) {\n      alert(`Congrats! You finished with a score of ${this.state.score - 1}`)\n      this.setState({ score: 0 })\n      document.getElementById('root').addEventListener(\"click\", this.reload());\n    }\n    else {\n      this.shuffle();\n      this.setState({\n        clicked: [id, ...this.state.clicked]\n      })\n      console.log(this.state.score);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Clicky Game</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#home\">Home</Nav.Link>\n            <Nav.Link href=\"#features\">New Game</Nav.Link>\n            <Nav.Link>\n              <span>Score: {this.state.score}</span>\n            </Nav.Link>\n          </Nav>\n        </Navbar>\n        <div className=\"App\">\n          <div className=\"container\">\n            {items.map(item => (\n              <BoardItems\n                key={item.id}\n                name={item.name}\n                image={item.image}\n                score={() => this.handleScore(item.id)}\n                stateScore={this.state.score}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"react-bootstrap\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}